- config:
    name: "create user testsets."
    requires:
        - random
        - string
        - hashlib
    function_binds:
        gen_random_string: "lambda str_len: ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(str_len))"
        gen_md5: "lambda *str_args: hashlib.md5(''.join(str_args).encode('utf-8')).hexdigest()"
    variable_binds:
        - TOKEN: debugtalk
        - random: {"func": "gen_random_string", "args": [5]}
        - data: '{"name": "user", "password": "123456"}'
        - authorization: {"func": "gen_md5", "args": ["${TOKEN}", "${data}", "${random}"]}

- test:
    name: create user which does not exist
    variable_binds:
        - data: '{"name": "user", "password": "123456"}'
    request:
        url: http://127.0.0.1:5000/api/users/1000
        method: POST
        headers:
            Content-Type: application/json
            authorization: "${authorization}"
            random: "${random}"
        data: "${data}"
    validators:
        status_code: {"comparator": "eq", "expected": 201}
        content.success: {"comparator": "eq", "expected": true}

- test:
    name: create user which does not exist
    variable_binds:
        - data: '{"name": "user", "password": "123456"}'
        - expected_status_code: 500
    request:
        url: http://127.0.0.1:5000/api/users/1000
        method: POST
        headers:
            Content-Type: application/json
            authorization: "${authorization}"
            random: "${random}"
        data: "${data}"
    validators:
        status_code: {"comparator": "eq", "expected": 500}
        content.success: {"comparator": "eq", "expected": false}
